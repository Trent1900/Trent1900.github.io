[ { "title": "video in next js", "url": "/posts/video/", "categories": "next.js vide", "tags": "", "date": "2024-10-24 11:02:00 +1100", "snippet": " video scr can not be loaded it turns out to be the git ignore file, coz during testing period, I do not to upload my testing video to git hub due to the size of it, so I put “.mp4” keyword in the ignore file, so that all mp4 file will be ignored and not up load to cloud. and works only in local environment. to add a preview of the video, simply just add poster='/images/poster.png' to video tag." }, { "title": "cron task", "url": "/posts/cron-task/", "categories": "mongoose type convert", "tags": "type script, typed", "date": "2023-12-29 11:02:00 +1100", "snippet": " 我设置了一个定时任务来跟踪 cw 网站上的价格变化，代码是这样的：schedule.scheduleJob(“* * */5 * * *”, () =&gt; {…});。我预期这个任务每 5 小时运行一次。然而，很快我发现 record 函数频繁运行，大概每一秒一次。后来查阅资料后，才知道～～～The cron expression * * */5 * * * breaks down as follows:First *: every secondSecond *: every minute*/5: every 5 hours～～～ For running the schedule every 5 minutes, the correct cron expression should be 0 */5 * * * *, which translates to: At second 0Every 5th minuteEvery hour" }, { "title": "Strong typed Polymorphic component", "url": "/posts/polimorphic/", "categories": "strong typed component, polymorphic component", "tags": "type script, typed", "date": "2023-09-06 10:02:00 +1000", "snippet": "Creating an polymorphic component In this example, we’ll leverage typescript to build a strong typed component that can have its only props instead of setting all props as optional props strong typed component, let say if we have an Component called ‘MyComponent’ with as props to be img, then the compiler should give us a warning that img element need to have src and alt pros&lt;MyComponent as=\"img\" src=\"\" alt=\"\" /&gt; how can we achieve this? we can set src and alt in the component props.like this:type Props = { as: React.ElementType; children: React.ReactNode; src: string; alt: string;};const MyComponent = ({ as, children }: Props) =&gt; { const Component = as || \"div\"; return &lt;Component&gt; {children}&lt;/Component&gt;;};export default MyComponent; the above method has a big issue,if the as props is set to be, let say, &lt;p&gt; element, the src and alt is not needed in the props. to this point, we can use generic to solve this issue. and the component will looks like this: type Props&lt;C extends React.ElementType&gt; = { as?: C; children: React.ReactNode;} &amp; React.ComponentPropsWithoutRef&lt;C&gt;;const MyComponent = &lt;C extends React.ElementType&gt;({ as, children, ...restProps}: Props&lt;C&gt;) =&gt; { const Component = as || \"div\"; return &lt;Component {...restProps}&gt; {children}&lt;/Component&gt;;};export default MyComponent; in the above example, we have const Component = as || \"div\"; that means if the optional as is undefined, the Component will have a default value of div. but does Typescript know it? Look at the code below:&lt;MyComponent href=\"\"&gt;hello world&lt;/MyComponent&gt; there would be no warning by Typescript which is no good, because MyComponent with no preset as props will become an div, and to set an href attribute to a div is not something good, we want TS to give us some waring.here is how we do it:type Props&lt;C extends React.ElementType&gt; = { as?: C; children: React.ReactNode;} &amp; React.ComponentPropsWithoutRef&lt;C&gt;;const MyComponent = &lt;C extends React.ElementType = \"div\"&gt;({ as, children, ...restProps}: Props&lt;C&gt;) =&gt; { const Component = as || \"div\"; return &lt;Component {...restProps}&gt; {children}&lt;/Component&gt;;};export default MyComponent; now we want to make the Props&lt;C&gt; ‘clean’ up a bit, so we can leverage React.PropsWithChildren and the code will look like this:import { ElementType, ComponentPropsWithoutRef, PropsWithChildren,} from \"react\";type RainBow = \"orange\" | \"yellow\" | \"purple\" | \"black\" | \"green\" | \"red\";type TextProps&lt;C extends ElementType&gt; = { as?: C; color?: RainBow | \"lime\";};type Props&lt;C extends React.ElementType&gt; = PropsWithChildren&lt;TextProps&lt;C&gt;&gt; &amp; ComponentPropsWithoutRef&lt;C&gt;;const MyComponent = &lt;C extends ElementType = \"div\"&gt;({ as, color = \"lime\", children, ...otherProps}: Props&lt;C&gt;) =&gt; { const Component = as || \"div\"; return &lt;Component {...otherProps}&gt;{children}&lt;/Component&gt;;};export default MyComponent; now it is time to make it reusable. we split as and color into two different props.type AsProp&lt;C extends React.ElementType&gt; = { as?: C;};type TextProps = { color?: Rainbow | \"black\" }; and we can change the PolymorphicComponentProp utility definition to include the as prop, component props, and children prop:type AsProp&lt;C extends React.ElementType&gt; = { as?: C;};type PolymorphicComponentProp&lt; C extends React.ElementType, Props = {}&gt; = React.PropsWithChildren&lt;Props &amp; AsProp&lt;C&gt;&gt;; so the final result will looks like this:type RainBow = | \"red\" | \"orange\" | \"yellow\" | \"green\" | \"lime\" | \"blue\" | \"purple\";type TextProps = { color?: RainBow | \"black\";};type AsProp&lt;C&gt; = { as?: C;};type PropsToOmit&lt;C extends React.ElementType, P&gt; = keyof (AsProp&lt;C&gt; &amp; P);type PolymorphicComponentProp&lt; C extends React.ElementType, Props = {}&gt; = React.PropsWithChildren&lt;Props &amp; AsProp&lt;C&gt;&gt; &amp; Omit&lt;React.ComponentPropsWithoutRef&lt;C&gt;, PropsToOmit&lt;C, Props&gt;&gt;;export const Text = &lt;C extends React.ElementType = \"span\"&gt;({ as, children, color, ...restProps}: PolymorphicComponentProp&lt;C, TextProps&gt;) =&gt; { const Component = as || \"span\"; return &lt;Component {...restProps}&gt;{children}&lt;/Component&gt;;};" }, { "title": "Dropdown manual with recursive method", "url": "/posts/dropdown-manual/", "categories": "dropdown manual, recursive component", "tags": "recursion, drop down", "date": "2023-08-06 10:02:00 +1000", "snippet": "Creating a Recursive List Menu Any Number of Levels Deep In this example, we’ll leverage recursion to build a menu that can have an unlimited number of nested levels. And the result will looks like this: Before diving into the task at hand, it is essential to establish the data type we are working with. Think about a scenario where we aim to display an image using a URL stored within the data. Without prior knowledge of the data structure, attempting to achieve this task would be impossible. Therefore, defining the data type is a fundamental prerequisite. this is to say that: generics in ts does not help with this case that much.for data looks like : const items = [ { title: \"Item 1\", subItem: [ { title: \"Item 1.1\", subItem: [ { title: \"Item 1.1.1\", }, ], }, { title: \"Item 1.2\", }, ], }, ]; the type should be :interface SubItem { title: string; subItem?: SubItem[];}interface DropdownListProps&lt;T&gt; { items: T[];}const DropdownItem = ({ item }: DropdownItemProps) =&gt; { const [isOpen, setIsOpen] = useState(false); const handleMouseEnter = () =&gt; { setIsOpen(true); }; const handleMouseLeave = () =&gt; { setIsOpen(false); }; return ( &lt;div onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} style= &gt; {item.title} {Array.isArray(item?.subItem) &amp;&amp; isOpen &amp;&amp; ( &lt;div style= &gt; {item.subItem.map((childItem) =&gt; ( &lt;DropdownItem key={childItem.title} item={childItem} /&gt; ))} &lt;/div&gt; )} &lt;/div&gt; );};function DropdownList&lt;T extends SubItem&gt;({ items }: DropdownListProps&lt;T&gt;) { return ( &lt;div&gt; {items.map((item) =&gt; ( &lt;DropdownItem key={item.title} item={item} /&gt; ))} &lt;/div&gt; );}export default DropdownList; in the code, we will check the type of item.subItem with Array.isArray(item?.subItem), if it is an array, we will proceed the recursion function ` {item.subItem.map((childItem) =&gt; (&lt;DropdownItem key={childItem.title} item={childItem} /&gt;))}`. that is how to implement the recursion method to create an dropdown list. further improvement(TODOS:): considering accessibility and keyboard events" }, { "title": "debounce", "url": "/posts/debounce/", "categories": "debounce", "tags": "debounce", "date": "2023-08-01 12:02:00 +1000", "snippet": "debounce what is debounce A debounce function in JavaScript ensures that your code is executed only once per user input. It is commonly used for scenarios such as search box suggestions, text-field auto-saves, thereby enhancing user experience and optimizing performance. how debounce works,check the link The principle of debounce is to wait for a certain period of time (the delay period) after the function is triggered. If the function is triggered again during this delay period, the timer is reset, and the function will only be executed when there are no further triggers within the delay period. This prevents the function from being executed multiple times in a short period, and it is commonly used in scenarios like search box suggestions or form validation, where we want the function to be executed only after the user stops inputting or interacting.function debounce&lt;T extends any[]&gt;(cb: Function, delay: number) { let timer: NodeJS.Timeout; return (...arg: T) =&gt; { clearTimeout(timer); timer = setTimeout(() =&gt; { cb(...arg); }, delay); };}const debouncedClickHandler = useCallback(debounce(handleClick, 1000), []); Please Note, that the handleClick function should be the previous handleClick function that bind to the onClick event. we probably noticed that on the example provide, the button’s onClick event is not called until the timer countdown is over, which means that the user who clicked the button will have to wait for a while before the onClick event to work, which is not very good, as we want to bring better user experience and will not let user wait for no reason(get them the result before they click the button that is my motto). in order to do that, we need to modify our code a bit to make it throttle instead of debounce. here is the code:const throttle = &lt;T extends any[]&gt;(cb: Function, delay: number) =&gt; { let timer: NodeJS.Timeout | undefined; return (...arg: T) =&gt; { if (!timer) { cb(...arg); } clearTimeout(timer); timer = setTimeout(() =&gt; { timer = undefined; }, delay); };}; this code will introduce a timer, when timer starts, cb will be triggered when the timer id is not available, i.e. when timer hasn’t start or when timer is over. in another word, when the throttle function is called for the first time, cb will be triggered, and then a timer will also started with a timer id called timer. with the timer id, cb will not work because of ` if (!timer) condition check and when the timer is over, this timer id will be set to be undefined so that allow the cb` callback function to work again." }, { "title": "3D CSS", "url": "/posts/3d-css/", "categories": "css, 3D, perspective, transform", "tags": "css", "date": "2023-07-18 12:02:00 +1000", "snippet": "3D transform-style: flat vs transform-style: preserve-3d refer to link The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element, in short, preserve-3d 可以立体穿透。 Each 3D element with z&gt;0 becomes larger; each 3D-element with z&lt;0 becomes smaller. The strength of the effect is determined by the value of this property. Large values of perspective cause a small transformation; small values of perspective cause a large transformation, to sum up,perspective defines how far the object is away from the user. how perspective works " }, { "title": "Next.js font optimization", "url": "/posts/next-font-optimization/", "categories": "font, next.js", "tags": "font", "date": "2023-07-18 12:02:00 +1000", "snippet": "Next Font optimization next/font includes built-in automatic self-hosting for any font file. This means you can optimally load web fonts with zero layout shift, thanks to the underlying CSS size-adjust property used. how size-adjust works The size-adjust CSS property is used to control the rendering of glyphs that are replaced by alternative glyphs with specific aspect ratios. It is primarily used for optimizing the layout and preventing layout shifting caused by text content loading. When the browser encounters text content that uses custom fonts or has a fallback font with different aspect ratios, it may cause layout shifting as the text is rendered differently after the font is loaded. By using the size-adjust property, you can specify the aspect ratio of the fallback font to match that of the custom font. This helps the browser reserve the appropriate amount of space for the text content even before the custom font is loaded, reducing the chances of layout shifting when the custom font is applied. body { font-family: \"CustomFont\", \"FallbackFont\", sans-serif; size-adjust: 0.5; /* Adjust this value to match the aspect ratio of the \"CustomFont\" */} In the above example, the size-adjust property is set to 0.5, which indicates that the fallback font has half the aspect ratio of the custom font. This helps maintain the layout consistency and reduce layout shifting when the custom font is eventually loaded. It’s important to note that not all browsers support the size-adjust property, so it should be used with caution and tested across different browsers to ensure compatibility. Additionally, using font-display: swap; for the custom font can further mitigate layout shifting by swapping the custom font with the fallback font immediately until the custom font is fully loaded. Next.js’s font system also allows us to conveniently use all Google Fonts with performance and privacy in mind. CSS and font files are downloaded at build time and self-hosted with the rest of our static assets. No requests are sent to Google by the browser. two ways to use next font the first one // in src/utils/fontimport { Syne, Roboto_Mono } from \"@next/font/google\";export const fontSyne = Syne({ subsets: [\"latin\"] });export const mono = Roboto_Mono({ subsets: [\"latin\"] }); when subset property is used, the font will automatically be preloaded according to next.js’s mechanism, subset means smaller size, thus less likely to cause a layout shifting. then people can import fontSyne and use it straight away.import { fontSyne } from \"@/pages/_app\";&lt;h1 className={`${fontSyne.className} otherCSSLike:text-red-500`}&gt; hello world&lt;/h1&gt;; the second one (with tailwind) idea: we can register this custom font as our custom font with tailwind config through a css variable.import { Allura } from \"next/font/google\";const allura = Allura({ subsets: [\"latin\"], variable: \"--font-allura\",});export default function MyApp({ Component, pageProps }) { return ( &lt;main className={`${Allura.variable} font-sans`}&gt; &lt;Component {...pageProps} /&gt; &lt;/main&gt; );}please note that the custom font variable has to be passed to a html tag, preferably the one in the very high level near the root tag, in the example we pass the class name `inter.variable` to `main` element. later, we need to add the CSS variable to our Tailwind CSS config:/** @type {import('tailwindcss').Config} */module.exports = { content: [ \"./pages/**/*.{js,ts,jsx,tsx}\", \"./components/**/*.{js,ts,jsx,tsx}\", \"./app/**/*.{js,ts,jsx,tsx}\", ], theme: { extend: { fontFamily: { allura: [\"var(--font-allura)\"], }, }, }, plugins: [],}; finally, in other part of the project, we can use the custom font that we registered in our tailwind css.&lt;button className=\"font-allura\"&gt;button&lt;/button&gt; font-allura is registered to our tailwind css config and can be used like other tailwind css." }, { "title": "Stripe Webhook", "url": "/posts/Stripe-Webhook/", "categories": "webhook, payment", "tags": "webhook, stripe", "date": "2023-07-08 12:02:00 +1000", "snippet": "Why Webhook? To ensure security, Stripe hosts the payment session, which means our server remains unaware of the payment session’s status as it takes place exclusively on the Stripe website. To address this, we can leverage Stripe’s webhook to initiate calls to our backend API, allowing us to update our order information accordingly. here is the diagram about how webhook is working on our server and frontend. Button 组件的话，用 child 比较好。" }, { "title": "custom Express request object in typescript", "url": "/posts/add-custom-obj-to-Express-Request/", "categories": "Blogging, type", "tags": "ts, type", "date": "2023-07-05 12:02:00 +1000", "snippet": "To add a custom request head for deserialize user in authenticationProperty 'user' does not exist on type 'Request&lt;ParamsDictionary, any, any, ParsedQs, Record&lt;string, any&gt;&gt;'.To fix the error,two things needs to be done add type roots in tsconfig.json// tsconfig.json\"typeRoots\": [ \"./typings\", \"./node_modules/@types\" ] /* List of folders to include type definitions from. */, add the custom type here// typings/express/index.d.tsdeclare namespace Express { interface Request { customTypes: { // add the custom types here }; }} more infos refers to the link" }, { "title": "create a sorting table in React", "url": "/posts/table-sorting/", "categories": "Blogging, jwt", "tags": "logout", "date": "2023-07-03 22:02:00 +1000", "snippet": "Create a react sorting function pass the list for sorting, and we will need to know which column we want to start sorting, so we will need two argument, which is the list and the column, last but not least, we would need to know the sorting order. by now we have three parameters in the function.export function listSort&lt;T&gt;(list: T[], key: keyof T, isAscending: boolean) { let sortedList; sortedList = [...list].sort((a, b) =&gt; { const valueA = a[key]; const valueB = b[key]; if (typeof valueA === \"string\" &amp;&amp; typeof valueB === \"string\") { const comparison = valueA.localeCompare(valueB); return isAscending ? comparison : -comparison; } if (typeof valueA === \"number\" &amp;&amp; typeof valueB === \"number\") { return isAscending ? valueA - valueB : valueB - valueA; } return 0; }); return sortedList;} The function listSort is defined as a generic function with a type parameter T that extends Record&lt;number, string&gt;. This ensures that the elements of the list array have keys of type number and values of type string. The function takes three parameters: list: T[]: An array of objects of type T. key: keyof T: The key of the object on which the sorting will be performed. isAscending: boolean: A boolean value indicating whether the sorting should be in ascending order. Inside the function, a variable sortedList is declared to store the sorted array. The sortedList is assigned the sorted version of the list array. The spread operator ([…list]) is used to create a new array with the same elements as the list array. The sort method is called on the sortedList array, passing a comparison function as an argument. This comparison function compares the values of the key property on each pair of objects (a and b) in the array. Inside the comparison function, the values of the key property (valueA and valueB) are extracted from the objects a and b, respectively. The comparison is performed based on the types of valueA and valueB: If both values are strings, the localeCompare method is used to perform a string comparison, and the result is returned. If both values are numbers, a numerical comparison is performed by subtracting one value from the other. If the values have different types or are not strings or numbers, a default value of 0 is returned. Finally, the sortedList, which is the list that we rearranged just now, is returned. some tips about generic in ts utilize the T extends Record&lt;number, string&gt; syntax in TypeScript to indicate that the generic type T can be an object with keys that are of type number, similar to the example object providedconst myObj = { 1: \"first\", second: \"second\",};" }, { "title": "use generic to help with the returned value", "url": "/posts/generic-ts/", "categories": "Blogging, jwt", "tags": "jwt decode, type", "date": "2023-07-02 22:02:00 +1000", "snippet": "data type of jwt verify functionWhen handling tokens, a common practice is use the jwt.verify function to check if a token is valid, and then add the decoded content from jwt.verify to req.user.export function verifyJWT(token: string) { try { const decoded = jwt.verify(token, publicKey); return { payload: decoded, expired: false }; } catch (error) { return { payload: null, expired: true }; }} Because the return value of the verifyJWT function is customized based on the project’s requirements, it can be challenging to determine its type. In such cases, we can use TypeScript’s generics type.export function verifyJWT&lt;T&gt;(token: string) { try { const decoded = jwt.verify(token, publicKey) as T; // if no error, that means decoded is working, and add expired :false to frontend return { payload: decoded, expired: false }; } catch (error) { return { payload: null, expired: true }; }} When calling this function, we can specify the type of the returned value:type Decode = { sessionId: string; expired: boolean;};const decoded = verifyJWT&lt;Decode&gt;(refreshToken).payload;if (!decoded) { return next();}const sessionId = decoded.sessionId; Use generics in react componentimport React from \"react\";// Define a generic type for the props of the componenttype ButtonProps&lt;T&gt; = { label: string; onClick: (event: React.MouseEvent&lt;HTMLButtonElement&gt;) =&gt; void; data: T; // The generic data prop};// Create a generic component that accepts the generic type as a propfunction Button&lt;T&gt;({ label, onClick, data }: ButtonProps&lt;T&gt;) { return ( &lt;button onClick={onClick}&gt; {label}: {data} &lt;/button&gt; );}// Usage example:const App = () =&gt; { // Specify the data type when using the Button component return ( &lt;div&gt; &lt;Button&lt;string&gt; label=\"String Button\" onClick={() =&gt; alert(\"Clicked!\")} data=\"Hello\" /&gt; &lt;Button&lt;number&gt; label=\"Number Button\" onClick={() =&gt; alert(\"Clicked!\")} data={42} /&gt; &lt;/div&gt; );};export default App; Summary at the moment when we “use” or “evoke” the function, we can pass the generic types into it. this means, we have the ability to “change” a preset function with the help of generic. In our case, &lt;Button&lt;string&gt;/&gt; the generic type is set to be &lt;string&gt;,and the Component(function) Button’s generic T is set to be “string” as well and it is very powerful. Generics are a powerful feature in statically-typed languages, allowing developers to parameterize types and make components more flexible and reusable. By introducing generics, a component can accept and enforce specific types that are provided when the component is used, improving type safety and reducing code duplication.TypeScript generics is very power when we try to define the type of the parameters or return values whose types may vary." }, { "title": "handle JWT token when logout", "url": "/posts/jwt/", "categories": "jwt", "tags": "logout, jwt", "date": "2023-07-02 22:02:00 +1000", "snippet": "handle JWT token JWT is stateless, meaning jwt is not stored in server/backend. JWT issues and validates the token by itself. thus, it is not possible to “destroy” the token at the server side.Frontend Upon log out, delete the stored token from the client-side to prevent further usage. and wait until the token expired. before expiry, this token will still be valid and can be used in other microservices, and this could be a potential risk in some cases when a higher security level is needed.backend if we require a strict log out functionality that cannot rely on token auto-expiration, we can consider the following solution: silent refresh Silent refresh is a mechanism to generate new access token from refresh token automatically in the event of browser refresh or when access token is expired but refresh token is available and valid. for each request after the deserializeUser middleware, we will add user object to request and request without such object will be returned with 403 unauthorized.type DecodeUser = { sessionId: string; email: string; valid: boolean; name: string;} | null;interface JWTRequest extends Request { user: DecodeUser;}export const deserializeUser = ( req: JWTRequest, res: Response, next: NextFunction) =&gt; { const { accessToken, refreshToken } = req.cookies; // if cookie is valid const decode = verifyJWT&lt;DecodeUser&gt;(accessToken); if (!decode) { return next(); } const { expired, payload } = decode; if (!expired) { req.user = payload; return next(); } when access token expired, we will need to check refresh token,and by decoding refresh token, we will get the session id of current session,if refresh token is not expired. Then we retrieve current session from DB. sign and decode with jwt, we will have the new access token and the new user object respectively. and we will use the new access token for http request, and user object to stop unauthorized access.// handle expired tokentype Refresh = { sessionId: string;};const { payload: refresh } = expired &amp;&amp; refreshToken ? verifyJWT&lt;Refresh&gt;(refreshToken) : { payload: null };if (!refresh) { return next();}const session = getSession(refresh.sessionId);if (!session) { return next();}const newToken = signJWT(session, \"5s\");req.user = verifyJWT&lt;DecodeUser&gt;(newToken).payload;res.cookie(\"accessToken\", newToken, { maxAge: 500000, httpOnly: true,});return next(); Set a reasonable expiration time on tokens to enforce automatic expiration with a silent refresh. Implement a “Blacklist” mechanism to track invalidated tokens. This can be achieved by using a database with a TTL (Time-to-Live) feature, where each token is stored with an expiration time. consider using Redis3.Redis is a fast in-memory database, for efficient Blacklist management and token validation.By implementing this approach, we can add an extra layer of security and ensure that unauthorized or invalidated tokens are rejected during authorized requests." }, { "title": "Close AWS free tier account", "url": "/posts/close-aws/", "categories": "Blogging, aws", "tags": "close aws", "date": "2023-06-09 19:02:00 +1000", "snippet": "Today I received an email from AWS stating that I have 30 days left on my AWS free tier. To avoid being charged (even though I have already been charged several tens of Australian dollars), I have decided to close this account first and apply for a new free tier account if needed.Steps to close AWS account Close all billable services It is known that IAM is a free service, but it may take more time to confirm which services are free. Therefore, the simplest approach is to close all services. The question now is how to find all the services. using tag editor from resource groups management, I can find all the active services. It was quite surprising to see how many AWS services I have. Most of them are VPCs automatically generated by Elastic Beanstalk, and there are also some IAM policies and roles. After half hours work,I have closed all the aws active service, including IAM service to put myself at a safe place. And I am hoping that I can save at lease 20 dollars, because I have closed one elastic beanstalk, one dynamoDB and a few S3 bucket. According to AWS, the account will be kept for 3 months after closing, and I might still be liable for the cost that is not terminated. I am not very fond of this clause. For free tier users, AWS should provide an automated account closure service instead of having to go through the hassle of finding all the services using the tag system and manually closing each one. Unfortunately, AWS seems more focused on making money and doesn’t prioritize user experience. Perhaps programmers are not considered ordinary users." }, { "title": "week 3-4 2023", "url": "/posts/week3-4/", "categories": "Blogging", "tags": "backend study", "date": "2023-01-13 20:02:00 +1100", "snippet": "9 Jan 2023 to 15 Jan 2023Weekly forecast Work on backend cms Ask and it will be given to you; seek and you will find; knock and the door will be opened to you. Matthew 7:7jwt.verify jwt.verify will return the decoded payload,usually the username and id inform, if the token and secrete key is correct. the payload can be used in frontend for user access control.const payload = verifyToken(tokenArray[1]);req.user = payload;// here we register the payload to req.user attribute(modify req),and if we put {role:'teacher'} in the payload, we can access req.user later, to check if this user is a teacher(in another middleware).userSelector 可以取到 store state 中的数据 可以在 redux slice 文件中提前将 state 通过箭头函数发送出去.之后通过把该函数在 useSelector 中直接引用来使用.useSelector(slice.fn) will get you the state.which is the same as normal useSelector.const login = useSelector((state) =&gt; state.auth.login); //this is the common use// in redux sliceexport const selectIsLoggedIn = (state) =&gt; state.auth.isLoggedIn;// in jsxconst login = useSelector(selectIsLoggedIn); this two block will get us the same result.前端的 search 功能 把后端的数据保存拿到后,当成 payload 传给 redux.这样 redux 就有了全部的数据,然后再 redux slice 中作 filter,include 之类的." }, { "title": "week 2 2023", "url": "/posts/week2/", "categories": "Blogging", "tags": "aws study", "date": "2023-01-02 20:02:00 +1100", "snippet": "2 Jan 2023 to 9 Jan 2023Weekly forecast Work on backend cms I will persist until I succeed —by OG Mandinoexpress.Router Use the express.Router class to create modular, mountable route handlers. A Router instance is a complete middleware and routing system; for this reason, it is often referred to as a “mini-app”.const taskRouter = express.Router();// 缺省tasks directorytaskRouter.get(\"\", getAllTasks);taskRouter.get(\"/:id\", getTaskById);taskRouter.post(\"\", newTasks);taskRouter.put(\"/:id\", updateById);taskRouter.delete(\"/:id\", deleteById);module.exports = taskRouter; so taskRouter is like a mini-app, because on app, we can also register the node(endpoint) and handler/middleware-function to it, only need to expose it by module.exports = taskRouter. as taskRouter is a module(function), so it can be used in app.use('/tasks',taskRouter).create a new data to document in mongoDBconst newUser = new userModel(userObj);await newUser.save(); userObj must be a object that meet the requirement from the userModel schema.middleware cors dotenv change of dotenv file request a restart of node server, with command rs in console. morgan log the request origin, request time and so on const morgan = require(\"morgan\");app.use(morgan()); helmet protect the header check with postman, header section.’x-powered-by’ info will be covered.(server normally not update after deploy, with newer version released, the bugs in the previous version will become public known bugs.) winston control level, output directory/database/logger library. mongoose findOneAndUpdate() As the name implies, findOneAndUpdate() finds the first document that matches a given filter, applies an update, and returns the document. By default, findOneAndUpdate() returns the document as it was before update was applied. You should set the new option to true to return the document after update was applied. findOneAndX and findByIdAndX functions support limited validation. You can enable validation by setting the runValidators option.If you need full-fledged validation, use the traditional approach of first retrieving the document. 用了 findAnd 的话,validator 会不好使.想要 validator 要用传统方法,save()const doc = await Model.findById(id);doc.name = \"jason bourne\";await doc.save(); 数据验证可以单独写,写一次,前后端都可以用. 永远不要相信客户端发送过来的数据,一定要自己验证一遍!!! important to validate the data from frontEnd regex101 can interpret the regex and test it, handy website.use Joi for validation two steps validation: a schema is constructed the value is validated against the defined schema: const schema = Joi.string().email();const validation = schema.validate(email);error middleware express async error will auto create one error handler. if ‘express async error’ package is used in express 4, error middleware must be registered after the route handler(s). index.js(error md) should be placed at the bottom of the error middleware chain to send 500 error, and should record error and user behavior if possible for troubleshooting. 有写 next() 一定要加 return, in error middleware, return should be added to next().customized schema method customized schema methods with the cod, and then all instances of mySchema has their own method called hashPassword. remember customized schema methods need to be registered before model forming. mySchema.methods.hashPassword = async function () { this.password = await bcrypt.hash(this.password, 12);};module.exports = model(\"yourdocument\", mySchema);// after doing so, all instances of schemaA has their own method called hashPassword. Do not declare methods using ES6 arrow functions (=&gt;). Arrow functions explicitly prevent binding this, so your method will not have access to the document and the above examples will not work.token generate and validate generate token when user try to register or login verify token using the middleware authGuard. status(401)meaning unauthorizedbcrypt hash and compare is async need add async and await 不然会出错test Jest 函数 B.toHaveBeenCalled(参数 A)表示测试的时候,参数 A 会被传入函数 B,如果传入的不是 A,则会报错,这个语句在 res.status(201).json({})时候很有用.callback hell nested callback, one depends on the other. develops vertically instead of horizontally." }, { "title": "week 1 2023", "url": "/posts/week1/", "categories": "Blogging", "tags": "aws study", "date": "2022-12-28 18:02:00 +1100", "snippet": "26 Dec 2022 to 1 Jan 2023Weekly forecast Work on aws and previous project summary I will act now. —by OG MandinoError when try to host Unicorn web on AmplifyPlease sign in to access the item on ArcGIS Online. according to the link, the cause could be the s3 bucket where I copy my repo is in US server, thus the GIS map is also the US one, that does not work on the sydney server. Let’s try to switch to the US local one. update on 28 Dec. according to link by jeffsec-aws, one of the library needs to be updated from 4.3 to 4.23 with a different public ID. change version from 4.3 to 4.23 solved the problem though. actually, 4.6 worked for it.set a git remote origin from CLI git remote set-url origin http://new.url.here, after that, git push -u remote origin You can create multiple API keys with different restrictions to use them safely. For embedding a map, the Google Maps documentation has instructions for creating a correctly restricted API key so that it cannot be abused for other purposes at Get an API Key - Restricting API keys. It’s OK to include a restricted API key in your source code, because you cannot embed a map properly without doing that anyway.pip install need update try pip 3 install thenAWSS3 one zone infrequently access S3 infrequent access S3 glacier 30% cheaper cheaper than S3 standard for archive zone down then no access     DocumentDB has a 400KB max to upload files. npx nodemon index 临时全局 temp + global, 更常用于 create react app.nodemon dev dependency better: npm i -D nodemonWeekly summary API key can be stored as environment parameter on AWS as backend deployment(amplify can handle the environment variables).likn" }, { "title": "week 52 summary", "url": "/posts/week52/", "categories": "Blogging", "tags": "job hunting", "date": "2022-12-19 18:02:00 +1100", "snippet": "19 Dec 2022 to 25 Dec 2022Weekly forecast Work on Resume and job hunting I will fail often in order to succeed only once. —by OG Mandinoimport will be changed to require(or add “type” : “module” to package.json) import to be changed to require, export to be changed to module.exports = { foo } check Linkfor more detailsnode-fetch issue latest version of node-fetch(as Dec 2022 version 3.30) does not support import with ‘require’ need to to : change to version 2 with npm i node-fetch@2, then use require, or use axios instead of fetch, or change other require to import with add “type” : “module” in package.json (do not forget to npm install) google map API best practice For google map that needs to be rendered in frontend, a restricted API Key is recommended to be used, refer to link You can create multiple API keys with different restrictions to use them safely. For embedding a map, the Google Maps documentation has instructions for creating a correctly restricted API key so that it cannot be abused for other purposes at Get an API Key - Restricting API keys. It’s OK to include a restricted API key in your source code, because you cannot embed a map properly without doing that anyway.restrict google map API keyAWSS3 one zone infrequently access S3 infrequent access S3 glacier 30% cheaper cheaper than S3 standard for archive zone down then no access     DocumentDB has a 400KB max to upload files. Weekly summary API key can be stored as environment parameter on AWS as backend deployment(amplify can handle the environment variables).likn" }, { "title": "week 51 summary", "url": "/posts/week51/", "categories": "Blogging", "tags": "job hunting", "date": "2022-12-05 18:02:00 +1100", "snippet": "12 Dec 2022 to 18 Dec 2022Weekly forecast Work on Resume and job hunting I will fail often in order to succeed only once. —by OG MandinoJobPin’s work has been deployed to production. what a good news. people can use our resume builder function on website now. Go to the teams page, I can find my profile photo showed on the website!!!weather APP use the google place autocomplete API component to get address after autocomplete API rerender the page, input box lose focus resolve by adding an autoFocus Attribute to the input node. if need to get event and parameter at the same time, try the following method(Currying) 柯里化const handleSearchButton = (param) =&gt; async (event) =&gt; { return &lt;div&gt;something&lt;/div&gt;;}; when try to refactor above code to a ‘normal arrow function’, chrome keeps refreshes, I am worried about the free API quota/credit, so I decided to use vs debug instead of console log to find what is happening here. the above issue is solved, because there is a form onsubmit method, that bind to the function, change it to HOC. actually, that is not necessary. use this const handleSearchButton = async (param) =&gt; { return (event) =&gt; { //do something with event };}; so the event can be ‘caught’ by the returned arrow function inside the async function.build a proxy server to store API key. to protect the API key, I will build a proxy server to forward the GET request with API key stored on proxy server. concept: build the server to handle request weather data and send it back to frontend. front end send request with city location &amp; query param(air quality) to server for auto complete server return the address suggestions for processing by selecting the address, front end send the lon/lat data to backend backend use async request to get weather data and send to front end Steps write the very simple index.js for the node js server. send lat &amp; lon to server and server console log / send it back to front(need routing, parsing) AWS S3 delete issue only the creator can delete S3 bucket by default(root user cannot delete a bucket created by the other user)Weekly summary API key can be stored as environment parameter on AWS as backend deployment(amplify can handle the environment variables).likn" }, { "title": "week 50 summary", "url": "/posts/week50/", "categories": "Blogging", "tags": "job hunting", "date": "2022-12-05 18:02:00 +1100", "snippet": "06 Oct 2022 to 11 Oct 2022Weekly forecast Work on Resume and job hunting I like the the phrase job hunting, way better than ‘求职’(Chinese phrase), Coz Hunting is Human Nature!AWS charge me on EC2 $14 Tips: EC2 offer 750 hours for free tier user, which is bigger than 24*31 = 744 hours After checking and same researches, I opened 2 EC2 instances running the whole month. One of them is set up before moving house, and the other one set up by Tutor during his Lecture, and I volunteered to participate his demo practice for CI/CD. In AWS codePipeLine, deploy the repo to elastic beanstalk(env created automatically) add unsafe-perm for aws permission in .npmrc file difference between Elastic Beanstalk and Amplify check this link deploy on AWS amplify while having issue with cross-origin , refer to console error below:The page at '&lt;URL&gt;' was loaded over HTTPS, but requested an insecure resource '&lt;URL&gt;'. This request has been blocked; the content must be served over HTTPS.This is because of the weather request is set as http instead of https. change it to https, and test in Postman, that works, so push to GitHub. Route 53 cost $0.50 per hosted zone / month for the first 25 hosted zones google Place Autocomplete cost 17$ per 1000 time calls per month, with the monthly free quota/credit of $200, it’s not that easy to exceed my ZERO budget, but still need to be careful. check the linkWeekly Summary time went so fast that I have not yet start the code part. anyway, we throw a BBQ party in my back yard as the house warming party. invited about 10 people to the party and everyone have had a great time. I got myself ready for the job hunting process. and had a plan to fail 99 times and succeed at the 100th time." }, { "title": "week 47 summary", "url": "/posts/week47/", "categories": "Blogging", "tags": "project summary, JobPin project", "date": "2022-11-16 18:02:00 +1100", "snippet": "10 Oct 2022 to 17 Oct 2022Summary working on Konva react-konva for resume previewdownload one repo from GH, display lyric with konva and study npm install with errornpm ERR! code ERESOLVEnpm ERR! ERESOLVE unable to resolve dependency treenpm ERR!npm ERR! While resolving: lyrictor@0.1.0npm ERR! Found: react@18.0.0npm ERR! node_modules/reactnpm ERR! react@\"^18.0.0\" from the root projectnpm ERR!npm ERR! Could not resolve dependency:npm ERR! peer react@\"^16.8.0 || ^17.0.0-rc.1\" from @adobe/react-spectrum@3.16.3npm ERR! node_modules/@adobe/react-spectrumnpm ERR! @adobe/react-spectrum@\"^3.16.3\" from the root projectnpm ERR!npm ERR! Fix the upstream dependency conflict, or retrynpm ERR! this command with --force, or --legacy-peer-depsnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.npm ERR! check stack overflow with suggestions:TODO:backup file first before delete.(just not sure if this delete file will affect my current project? need to check later, by reboot mac and restart project.) https://stackoverflow.com/questions/72976149/npm-err-conflicting-peer-dependency-react18-0-0 above dose not solve my issue, install with –legacy-peer-deps instead 这个指令做了什么??TODO: what –legacy-peer-deps does: short answer is, this ignores the matching issue from dependency, it just install. for future study, check this link display an async image url to react konva, use one of the react hook. useImage.!! read the url on Safari browser, there is one bug, need to refresh the web to show the avatar image, solution from konva github urlfunction ComplexApp() { // set crossOrigin of image as second argument, set referrerpolicy as third argument const [image, status] = useImage(url, \"anonymous\", \"origin\"); // status can be \"loading\", \"loaded\" or \"failed\" return &lt;Image image={image} /&gt;;} after adding the status check, I am able to use conditional rendering to render the image. react hooks and lifecycle" }, { "title": "week 46 summary", "url": "/posts/week46/", "categories": "Blogging", "tags": "project summary, JobPin project", "date": "2022-11-10 18:02:00 +1100", "snippet": "10 Oct 2022 to 17 Oct 2022Summary moving my house and settled,coming back to my beloved coding.styled components’ css props with typeScript for single conditional styling in typeScriptconst OffspringComponent = styled.div` // other css ... color: ${(props) =&gt; props.theme || \"red\"};`; more complicated case: (inline CSS not allowed by code convention)pass a property to a div from father component for css. use theme as the props name , then use conditional rendering ‘&amp;&amp;’,see example: 一定要用 theme 关键字来接收参数,然后用&amp;&amp;(if else 需要大括号,大括号需要 return,不然 ts 会报错.)&lt;OffspringComponent theme={variant}&gt;// variant is a parameter from ancestor, destructive assignments of many props, so 'variant' cannot be changed to other keyword.// if 'theme' keyword is not used, let say use `variant = {variant}` instead, TS will be not happy.// conditional rendering &amp;&amp; is used here for conditional styling.const OffspringComponent = styled.div`// other css ... ${(props) =&gt; props.theme === \"round\" &amp;&amp; `\t\t\tpadding: 0px;\t\t\toverflow:hidden;\t\t\tborder-radius:50%;\t`}`;" }, { "title": "week 43 summary", "url": "/posts/week43/", "categories": "Blogging", "tags": "project summary, JobPin project", "date": "2022-10-17 07:30:00 +1100", "snippet": "10 Oct 2022 to 17 Oct 2022思路 点击 create button same as the button at JR dash board.TODOs change PersonalDetail to PersonalDetails change firtname to firstName, lastname to lastName 新建一个modal,接收resume的名字. 在后台看到我的 resume [ ] 在 profile/resume 页面,需要看到我以前创建的 resume.AWS CLI CLI console sensitive to CAPITAL letter, format accepted ‘json’,not ‘JSON’. aws configure Access Key ID Access Key region-name output format: json.SSH into the EC2 instance Have the pem key ready cd to the key file chmod 0400 keyFile.pem ssh -i keyFile.pem ec2-user@public-ip-address" }, { "title": "week 42 summary", "url": "/posts/week42/", "categories": "Blogging", "tags": "project summary, JobPin project", "date": "2022-10-10 07:30:00 +1100", "snippet": "10 Oct 2022 to 17 Oct 2022context api context api 静态,跨组件传递和共享,不考虑状态更新 context api + use reducer 中小型的状态管理场景,更新状态不复杂,对渲染性能要求不高 redux-toolkit react-redux redux devTools 需要用副作用机制/需要用到中间件" }, { "title": "week 41 summary", "url": "/posts/week41/", "categories": "Blogging", "tags": "project summary, JobPin project", "date": "2022-10-03 06:32:00 +1100", "snippet": "Nextjs public folder Next.js can serve static files, like images, under a folder called public in the root directory. Files inside public can then be referenced by your code starting from the base URL (/).(import is not needed)For example, if you add an file to public/default_avatar.svg, then img.scr will be direct to default_avatar.svg in public folder.&lt;AvatarImage src={imageUrl || `/default_avatar.svg`} /&gt; The nullish coalescing operator ?? is a logical operator that returns its right-hand side operand when its left-hand side operand is null or undefined, and otherwise returns its left-hand side operand. 有点像 logic or. const foo = null ?? \"default string\";console.log(foo);// expected output: \"default string\"const baz = 0 ?? 42;console.log(baz);// expected output: 0npm run start new repo, npm install, npm run start 后,网页报错code ERESOLVEnpm ERR! ERESOLVE could not resolvenpm ERR!npm ERR! While resolving: eslint-plugin-compat@2.7.0npm ERR! Found: eslint@7.32.0.........npm ERR! Fix the upstream dependency conflict, or retrynpm ERR! this command with --force, or --legacy-peer-depsnpm ERR! to accept an incorrect (and potentially broken) dependency resolution.npm ERR!npm ERR! See /Users/.../.npm/eresolve-report.txt for a full report.npm ERR! A complete log of this run can be found in:npm ERR! /Users/usr/.npm/_logs/2022-10-04T23_11_22_934Z-debug-0.logthe above error indicates a version conflict caused by npm version. use nvm change version“lockfileVersion” in package-lock.jsonlockfileVersion will appear at the top (3rd line for my case) in the package-lock.json file, it will tell you which npm version to use when you try to run npm install, if the npm version does not match, the package-lock.json might be rewritten by npm install. The lockfile version used by npm v5 and v6. The lockfile version used by npm v7, which is backwards compatible to v1 lockfiles. The lockfile version used by npm v7, without backwards compatibility affordances. This is used for the hidden lockfile at node_modules/.package-lock.json, and will likely be used in a future version of npm, once support for npm v6 is no longer relevant. check readme.md and package-lock.json to determine which npm to use interface and typeinterface DepositAction{ type:'deposit' payload:number}interface WithdrawAction{ type:'deposit' payload:number}interface BankruptAction{ type:'deposit' payload:number}export type Action = DepositAction | WithdrawAction | BankruptActionimport {Dispatch} from ‘redux’Dispatch is an type from redux.export type State = ReturnTypeReturnType is built-in type from reducer.similar to the above one.conditional rendering Ternary operation（三元），||以及 &amp;&amp; 可以实现 conditional rendering 例子: { showAirQuality &amp;&amp; current?.air_quality &amp;&amp; ( &lt;li className=\"mt-2 fs-5\"&gt; PM2.5: {current?.air_quality?.pm2_5} kph &lt;ProgressBar now={barCoverage} className=\"justify-content-end\" /&gt; &lt;/li&gt; );}float:right still take the place of the document. float: right bring element out of flow, but still in the same z-index, still affect the layout of other element. While position:absolute make the z-index higher, and free the space of original flow. this will be extremely useful when I try to use margin:auo to achieve the center effect, and with float:right, margin auto will not be what I want. use float:right, element will move to right. but still occupy the width, making other element’margin:auto, justify-content failed.假设给元素 A 设置了右浮动，float:right，此时元素 A 飘会向右边，“部分脱离”文档流。为什么说是部分脱离文档流呢,因为元素 A 还停留在文档流当中,并且占用文档流的空间.假设这时候有个 inline 的 B 元素,和 A 是并列的兄弟关系,如果对 B 元素设置 margin auto,这时候,B 元素只能的位置计算要扣除 A 元素所占的位置后,再计算居中,并不能做到真正的居中.说起来很复杂,我们上图看.同样的道理,父元素(flex)中设置 justify-content:center,也无法让他真正居中.这时候可用 position:absolute 来实现真正的脱离文档流(配合父元素 relative 来使用).想要向 onclick 函数传递参数 函数写成高阶函数的形式(HOC) &lt;BiSearch className=\"search-btn\" disabled={city.length &gt; 1 ? 0 : 1} onClick={onSearchButtonOnClick(city)}&gt;&lt;/BiSearch&gt;;const onSearchButtonOnClick = (param) =&gt; async (e) =&gt; { console.log(param);};date type on mobile device “11-29-2010” dash ‘-‘ is not recognized in mobile devicealert(new Date(\"11-29-2010\")); //doesn't work in mobile phonealert(new Date(\"11-29-2010\").replace(/-/g, \"/\")); //this one will work in mobile phoneSRP Single Responsibility Principle (SRP) The Single Responsibility Principle (SRP) is the concept that any single object in object-oriented programing (OOP) should be made for one specific function. SRP is part of SOLID programming principles put forth by Robert Martin. Traditionally, code that is in keeping with SRP has a single function per class.他也有缺点,就是会让代码量变大.Make an temperature bar with linear gradient color思路,背景 linear-gradient 固定从绿到红,然后上面覆盖一层灰色的 bar.灰色的长度和温度成反比.温度越高,灰色越短,这样下面的背景(绿到红)就会显示出一整段红色.上代码解释. with two bar overlap, bar A set green to red linear gradient, and bar B is grey color ,coat on top of bar A.// assume 40 is the max temp and shows pure red.var barCoverage = (1 - temperature / 40) * 100;.bar { background: linear-gradient( 90deg, rgb(0, 255, 1), yellow, tomato, rgba(255, 0, 0) );}.bar-coverage { background-color: #666;}" }, { "title": "week 40 summary - P1 project", "url": "/posts/week40/", "categories": "Blogging", "tags": "project summary, P1", "date": "2022-09-28 20:32:00 +1000", "snippet": "Record P1 tech summary, 26Sep ~2 Oct 2022This is tocss partposition:absolute cannot use BFC. use js to check the height of ‘tallest’ element and get the height to container(position absolute). BFC 只能清除 float 造成的浮动, 也会造成塌陷,无法用 BFC, 只能用 js 计算 container 的高度,然后手动赋值. bootstrap 缩写 mb-0: margin-bottom=0; px-1: padding(left &amp; right) py-1: padding(top &amp; bottom) bg-dark:set background to dark btn:create a btnget linear_gradient color on text 文字做彩色 linear#modal__sample span { color: transparent; background-clip: text; -webkit-background-clip: text; background-image: linear-gradient(90deg, #6c757d, #f9ecf1);} set background color set text color transparent set clip so that color see through to text.object-fit:cover prevent image become blurry object-fit:contain also keeps the aspect ratio,but resize to fit all in object-fit:scale-down 会选择 contain/none 中比较小的那个. use prettier ignore add&lt;!-- prettier-ignore --&gt; to the end of line to triggeruse media query@media (max-width: 991.98px) { .hero-1 { padding: 110px 0 0px; }}JS partwrite a modal with bootstrap&lt;div class=\"modal fade\" id=\"modal__trump__story\" tabindex=\"-1\" aria-hidden=\"true\"&gt; &lt;div class=\"modal-dialog modal-dialog-centered\"&gt; &lt;div class=\"modal-content\"&gt; &lt;div class=\"modal-body text-center p-4\"&gt; &lt;p class=\"text-muted \"&gt; put your text here 没有人比我更懂病毒,消毒水,好使,杀死99的病毒 &lt;/p&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;toggle a modal upon page loaded在页面加载时候,触发一个弹窗const myModal = new bootstrap.Modal(document.getElementById(\"onload_modal\"));myModal.toggle(); 通过 toggle 触发的 modal,是完整的.(better practice) 或者可以把 modal 的 display 变成 inline,同样可以实现类似功能. see below example 👇🏻const myModal = document.querySelector(\"#onload_modal\");myModal.style.display = \"inline\";// optionally, 可以加一个点击任意地方关闭modal的指令, 这个方法比较笨;document.documentElement.addEventListener(\"click\", () =&gt; { myModal.style.display = \"none\";});// not that good practiceget element width &amp;/ heightconst width = divContainer.offsetWidth;const height = divContainer.offsetHeight; or use element.getBoundingClientRect()使用 element.getBoundingClientRect()可以得到 element 的宽高,top,bottom,left,right 如下 👇🏻get viewport dimensionconst height = window.innerHeight || document.documentElement.clientHeight;const width = window.innerWidth || document.documentElement.clientWidth;check if is in viewportconst offset = { left: 0, right: 0, top: 0.1 * height, bottom: 0 };const isInViewPort = rect.top &gt;= -offset.top &amp;&amp; rect.left &gt;= -offset.left &amp;&amp; rect.bottom &lt;= height + offset.bottom &amp;&amp; rect.right &lt;= width + offset.right;import font awesome&lt;script defer src=\"https://use.fontawesome.com/releases/v5.15.4/js/all.js\" integrity=\"sha384-rOA1PnstxnOBLzCLMcre8ybwbTmemjzdNlILg8O7z1lUkLXozs4DHonlDtnE7fpc\" crossorigin=\"anonymous\"/&gt;mobile phone touch event on touch end, continue slider moving banners.addEventListener(\"touchend\", () =&gt; { moveSliderByTimer();});promise 必考 promise 来之前,async 的弊端. 单线程 single thread,异步 asyncconst request = new XMLHttpRequest();request.open('Get',url),request.send();request.addEventListener('load',function(){ const data = JSON.parse(); }) Ajax 数据返回有快慢,先返回先 render. call back hell, 回调里面有回调 fetch(url).then(data=&gt;console.log(data.jason())) fetch return a promise. (promise obj is a container for future result) trigger a rerender on function component state change props change father component render" }, { "title": "week 39 summary", "url": "/posts/week39/", "categories": "Blogging, Summary", "tags": "fullstack, study", "date": "2022-09-21 10:32:00 +1000", "snippet": "record my todo and technical summary during my study progress.Mandarin is my MotherLanguage, for easy skimming and scanning, a big part of my summary will be written in Mandarin and it is for my studying and reviewing purpose.convert to inline convert to inline will result in a gap between elements. coz return回车 &amp; spaces(if there are any) are converted into ONE space.that where the space comes from. [deploy to github page with Jekyll(with SEO)]for future study Mermaid is a great diagrams generation tool. To enable it on your post, add the following to the YAML block: Mermaid 用于画思维导图,流程图,值得学习.---mermaid: true--- 解构赋值类似于剥壳 destructure//解构赋值可以拿到深入一层的内容.比如说let OBJ = {people: { 名字: \"小明\", age: 25 },money: { 美金: 100, 日元: 1000 },};//如果不用解构赋值,那么let person = OBJ.people,//如果用了解构 with destructure{people} = OBJ,//这个people就是OBJ中的那个people. type(interface) before use. Typescript TS 在 component 中，想要使用一个变量，需要先在 IProps 中定义好。然后将 IProps 包裹在React.FC&lt;IProps&gt;之中。如下：const List: React.FC&lt;IProps&gt; = ({ people, test }) =&gt; { console.log(test);};Issues when try to Deploy by bundle lock –add-platform x86_64-linux add a new platform to gemfile. to pass the workflow error. still not show pages, just see the index.html file, but not the file in .site. 系统没有从_site file render 网页. 直接在 git hub 修改,然后手动 run workflow.最后本地删除在 clone 删除 baseurl 的/后Source: /home/runner/work/Trent1900.github.io/Trent1900.github.ioDestination: /home/runner/work/Trent1900.github.io/Trent1900.github.io/_siteTrent1900.github.ioIncremental build: disabled. Enable with --incremental Generating... done in 0.53 seconds. Auto-regeneration: disabled. Use --watch to enable.htmlproofer 3.19.4 | Error: _site does not exist up 主没有写 baseurl,我删除试试看. Check the GitHub repo work flow action error, I realize that the base url does not looks normal. Run bash tools/deploy.shConfiguration file: /home/runner/work/Trent1900.github.io/Trent1900.github.io/_config.yml Theme Config file: /home/runner/work/Trent1900.github.io/Trent1900.github.io/vendor/bundle/ruby/2.6.0/gems/jekyll-theme-chirpy-5.2.1/_config.yml Source: /home/runner/work/Trent1900.github.io/Trent1900.github.io Destination: /home/runner/work/Trent1900.github.io/Trent1900.github.io/_site Incremental build: disabled. Enable with --incremental Generating... done in 0.533 seconds. Auto-regeneration: disabled. Use --watch to enable.Running [\"HtmlCheck\", \"ImageCheck\", \"LinkCheck\", \"ScriptCheck\"] on [\"_site\"] on *.html...sectional summary (github hosting) known: deploy 的 config 写在 tools/deploy.sh 中. 了解了一点点 deploy 的流程 action yml 写在.github/workflows 文件夹下. workflow 报错的话,需要认真读报错的信息,然后找解决方法. html pages all hosted on_site file,如果 MD 无法写的内容,可以手动修改 html. markdown 实现跳转由于MD自动给每一个标题生成了一个id,这里用&lt;h2&gt;举个例子,&lt;h1&gt;~&lt;h6&gt;~&lt;h100&gt;都支持默认生成id## markdown 实现跳转系统自动生成的id=markdown-实现跳转, 全部小写,然后用减号-连接.利用这个我们可以写出锚点(#markdown-实现跳转).`**如果是中文锚点,那会更加简单,不用加连字符.**`枚举类型想要 map ???Object.keys(EProfileEditField) 这可以形成一个arr,arr里的内容是EProfileEditField这个key的value.想要map的话要如下:(Object.keys(MyEnum) as Array&lt;keyof typeof MyEnum&gt;).map((key) =&gt; {})Object.keys(MyEnum) 返回一个key 组成的array.Object.values(MyEnum) 返回一个value组成的array.枚举类型想要 map 的围魏救赵方法直接把currentUser这个obj传递给initialForm value.const initialFormValues = (currentUser: IUserBase | Partial&lt;IUserBase&gt;) =&gt; ({ ...currentUser });use state时候,直接赋值.const [formValues, setFormValues] = useState&lt;IUserBase | Partial&lt;IUserBase&gt;&gt;(\t\tinitialFormValues(currentUser)\t);hide input box use position absolute to hide it to corner check stack overflow and its css 有些 input 是 file 类型,默认有一个点击上传文件的框,如果不想要这个框,只想要 EDIT 这个文字链接,可以用 label 包起来,然后把 input 的位置放到最右下脚.chrome does not take document.body.scrollTop chrome does not take document.body.scrollTop, instead, use document.documentElement.scrollTop " } ]
